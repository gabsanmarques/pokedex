/**
 * Base URL from PokéAPI
 * @type {string}
 */
const base_url = "https://pokeapi.co/api/v2/";

/**
 * DIV where the Pokédex will be rendered
 * @type {HTMLDivElement}
 */
const pokedex = document.querySelector('.pokedex');

/** Class representing a Pokémon */
class Pokemon {
    /**
     * Create a Pokémon
     * @param    {int} number - The number that represents the Pokémon on the Pokédex
     * @param   {name} name - The name of the Pokémon
     * @param {string} sprite - The link to the Pokémon sprite
     * @param {Object} stats - All of the Pokémon stats
     */
    constructor(number, name, sprite, stats, types){
        this.number = number;
        this.name   = name;
        this.sprite = sprite;
        this.stats  = stats;
        this.types  = types
    }
}

/**
 * Capitalizes the first letter of a word
 * @param   {string} word - The word to be capitalized
 * @returns {string} Word with the first letter capitalized
 */
function capitalize(word) {
    return word.charAt(0).toUpperCase() + word.slice(1);
}

/**
 * Compares two Pokémon based on their number attribute
 * @param {Pokemon} a - First Pokémon
 * @param {Pokemon} b - Second Pokémon
 * @returns {int}
 */
const compare = (a, b) => {
    if(a.number < b.number) return -1;
    if(a.number > b.number) return  1;
    return 0;
}

/**
 * Get data from the PokeAPI API and fill the pokemon array with the results
 * @param {renderPokedex} _callback - Renders Pokémon cards from the Pokémon array generated
 */
const getPokemons = async (_callback) => {
    /**
     * Array of the promises generated by the PokéAPI fetch operation
     * @type {Promise[]}
     */
    let promises = [];

    /**
     * Array of Pokémons
     * @type {Pokemon[]}
     */
    let pokemons = [];

    for(let index = 1; index <= 151; index++)
    {
        promises.push(fetch(`${base_url}pokemon/${index}`));
    };

    Promise.all(promises)
        .then(results => Promise.all(results.map(r => r.json())))
        .then(results => {
            results.map(pokemon => {
                let number  = pokemon.id;
                let name    = capitalize(pokemon.name);
                let sprite  = pokemon.sprites.front_default;
                let stats   = {
                    'HP':  pokemon.stats[0].base_stat,
                    'ATK': pokemon.stats[1].base_stat,
                    'DEF': pokemon.stats[2].base_stat,
                    'SPE': pokemon.stats[5].base_stat,
                    'SPA': pokemon.stats[3].base_stat,
                    'SPD': pokemon.stats[4].base_stat
                };
                let types   = pokemon.types.map((types => types.type.name.toUpperCase()));

                pokemons.push(new Pokemon(number, name, sprite, stats, types));
            });

            renderPokedex(pokemons);
        });
};

/**
 * Transforms a number to the format #XXX
 * @param      {int} number - The number to be formatted 
 * @returns {string} Number in format #XXX
 */
const formatNumber = (number) => {
    if(number < 10)
        return `#00${number}`;
    else if(number <100)
        return `#0${number}`;
    return `#${number}`;
};

/**
 * Render the Pokémon cards on the document from the Pokémon array
 * @callback renderPokedex
 * @param {Pokemon[]} pokemons - Array of Pokemon
 */
const renderPokedex = (pokemons) => {
    console.log(pokemons);

    for(let i = 0; i < 12; i++)
    {
        /**
         * A single Pokémon
         * @type {Pokemon}
         */
        let pokemon = pokemons[i];

        pokedex.innerHTML += `
            <div class="pokemon-card">
                <div class="pokemon-front" id="${pokemon.name}-front">
                    <img src="${pokemon.sprite}" alt="${pokemon.name}" class="pokemon-img img-${pokemon.types[0].toLowerCase()}" />
                    <div class="pokemon-description">
                        <p class="pokemon-number"><span>${formatNumber(pokemon.number)}</span></p>
                        <p class="pokemon-name"><span>${pokemon.name}</span></p>  
                        <div class="type type-${pokemon.types[0].toLowerCase()}"><span>${pokemon.types[0]}</span></div>
                        ${ pokemon.types[1] == undefined ? '' : `<div class="type type-${pokemon.types[1].toLowerCase()}"><span>${pokemon.types[1]}</span></div>`}
                    </div>
                </div>

                <div class="pokemon-back type-${pokemon.types[0].toLowerCase()}">
                    <span>${pokemon.name.toUpperCase()}</span>
                    ${Object.entries(pokemon.stats).map(([stat, value]) => {
                        console.log(stat);
                        return `
                            <div class="stat">
                                <span class="stat-title">${stat}</span>
                                <span class="stat-value">${value}</span>
                            </div>
                        `
                    }).join('')}
                </div>
            </div>
        `;
    }

    /**
     * Array of pokémon cards fronts
     * @type {HTMLDivElement[]}
     */
    let pokemon_cards_fronts = document.querySelectorAll('.pokemon-front');

    /**
     * Array of pokémon cards backs
     * @type {HTMLDivElement[]}
     */
    let pokemon_cards_backs = document.querySelectorAll('.pokemon-back');

    pokemon_cards_fronts.forEach((card, index) => {
        card.addEventListener('click', () => {
            card.classList.add('unturned');
            card.classList.remove('turned');
            pokemon_cards_backs[index].classList.add('turned');
            pokemon_cards_backs[index].classList.remove('unturned');
        })
    });

    pokemon_cards_backs.forEach((card, index) => {
        card.addEventListener('click', () => {
            card.classList.add('unturned');
            card.classList.remove('turned');
            pokemon_cards_fronts[index].classList.add('turned');
            pokemon_cards_fronts[index].classList.remove('unturned');
        })
    })
}

getPokemons(renderPokedex);
document.querySelectorAll('.pokemon-card');
