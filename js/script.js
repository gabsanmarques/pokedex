//TODO: organize code and polish search system

/**
     * The left arrow element
     * @type {HTMLDivElement}
     */
const leftArrow = document.querySelector('.left-arrow');

/**
 * The right arrow element
 * @type {HTMLDivElement}
 */
const rightArrow = document.querySelector('.right-arrow');

/** Class representing a Pokémon */
class Pokemon {
    /**
     * Create a Pokémon
     * @param    {int} number - The number that represents the Pokémon on the Pokédex
     * @param   {name} name - The name of the Pokémon
     * @param {string} sprite - The link to the Pokémon sprite
     * @param {Object} stats - All of the Pokémon stats
     */
    constructor(number, name, sprite, stats, types){
        this.number = number;
        this.name   = name;
        this.sprite = sprite;
        this.stats  = stats;
        this.types  = types
    }
}

/**
 * Base URL from PokéAPI
 * @type {string}
 */
const base_url = "https://pokeapi.co/api/v2/";

/**
 * DIV where the Pokédex will be rendered
 * @type {HTMLDivElement}
 */
const pokedex = document.querySelector('.pokedex');


/**
 * DIV that displays the loading image
 * @type {HTMLDivElement}
 */
const loading_div = document.querySelector('.loading');

/**
 * The current displayed page
 * @type {int}
 */
var current_page;

/**
 * The total number of pages
 * @type {int}
 */
var total_pages;

/**
     * Array of Pokémons
     * @type {Pokemon[]}
     */
var pokemons = [];

var search_result = [];

const pokemons_to_show = () => {
    return (
        pokemons.filter((pokemon => {
            return (pokemon.name.toLowerCase().includes(search_bar.value.toLowerCase())
            || pokemon.number == search_bar.value);
        }))
    )
}

const search_bar = document.querySelector('#search');

search_bar.addEventListener('input', () => {
    current_page = 1;
    renderPokedex();
});

/**
 * Capitalizes the first letter of a word
 * @param   {string} word - The word to be capitalized
 * @returns {string} Word with the first letter capitalized
 */
const capitalize = (word) => {
    return word.charAt(0).toUpperCase() + word.slice(1);
}

/**
 * Compares two Pokémon based on their number attribute
 * @param {Pokemon} a - First Pokémon
 * @param {Pokemon} b - Second Pokémon
 * @returns {int}
 */
const compare = (a, b) => {
    if(a.number < b.number) return -1;
    if(a.number > b.number) return  1;
    return 0;
}

/**
 * Get data from the PokeAPI API and fill the pokemon array with the results
 */
const getPokemons = async () => {
    /**
     * Array of the promises generated by the PokéAPI fetch operation
     * @type {Promise[]}
     */
    let promises = [];

    for(let index = 1; index <= 151; index++)
    {
        promises.push(fetch(`${base_url}pokemon/${index}`));
    };

    Promise.all(promises)
        .then(results => Promise.all(results.map(r => r.json())))
        .then(results => {
            results.map(pokemon => {
                let number  = pokemon.id;
                let name    = capitalize(pokemon.name);
                let sprite  = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${pokemon.id}.png`;
                let stats   = {
                    'HP':  pokemon.stats[0].base_stat,
                    'ATK': pokemon.stats[1].base_stat,
                    'DEF': pokemon.stats[2].base_stat,
                    'SPE': pokemon.stats[5].base_stat,
                    'SPA': pokemon.stats[3].base_stat,
                    'SPD': pokemon.stats[4].base_stat
                };
                let types   = pokemon.types.map((types => types.type.name.toUpperCase()));

                pokemons.push(new Pokemon(number, name, sprite, stats, types));
            });

            initializeValuesAndFirstRender();
        });
};

/**
 * Transforms a number to the format #XXX
 * @param      {int} number - The number to be formatted 
 * @returns {string} Number in format #XXX
 */
const formatNumber = (number) => {
    if(number < 10)
        return `#00${number}`;
    else if(number <100)
        return `#0${number}`;
    return `#${number}`;
};

const setLoading = () => {
    loading_div.style.display = "block";
}

const setNotLoading = () => {
    setTimeout(() => {
        loading_div.style.display = "none";
    }, 500)  
}

const handleArrows = () => {
    if(total_pages == 1)
    {
        leftArrow.style.visibility = 'hidden';
        rightArrow.style.visibility = 'hidden';
    }
    else
    {
        leftArrow.style.visibility = 'visible';
        rightArrow.style.visibility = 'visible';
    }
}

/**
 * Render the Pokémon cards on the document from the Pokémon array
 * @callback renderPokedex
 */
const renderPokedex = () => {
    let pokemon_list = pokemons_to_show();

    total_pages = Math.ceil(pokemon_list.length / 12);
    console.log(total_pages);

    handleArrows();

    let start = (current_page - 1) * 12;
    let end = ((current_page) * 12 >= pokemon_list.length) ? (pokemon_list.length) : ((current_page) * 12);

    pokedex.innerHTML = '';

    for(let i = start; i < end; i++)
    {
        /**
         * A single Pokémon
         * @type {Pokemon}
         */
        let pokemon = pokemon_list[i];

        pokedex.innerHTML += `
            <div class="pokemon-card">
                <div class="pokemon-front" id="${pokemon.name}-front">
                    <div class="img-wrapper img-${pokemon.types[0].toLowerCase()}">
                        <img src="${pokemon.sprite}" alt="${pokemon.name}" />
                    </div>
                    <div class="pokemon-description">
                        <p class="pokemon-number"><span>${formatNumber(pokemon.number)}</span></p>
                        <p class="pokemon-name"><span>${pokemon.name}</span></p>  
                        <div class="type type-${pokemon.types[0].toLowerCase()}"><span>${pokemon.types[0]}</span></div>
                        ${ pokemon.types[1] == undefined ? '' : `<div class="type type-${pokemon.types[1].toLowerCase()}"><span>${pokemon.types[1]}</span></div>`}
                    </div>
                </div>

                <div class="pokemon-back type-${pokemon.types[0].toLowerCase()}">
                    <span>${pokemon.name.toUpperCase()}</span>
                    ${Object.entries(pokemon.stats).map(([stat, value]) => {
                        return `
                            <div class="stat">
                                <span class="stat-title">${stat}</span>
                                <div class="stat-bar type-${pokemon.types[0].toLowerCase()}">
                                    <div class="stat-value value-${pokemon.types[0].toLowerCase()}">${value}</div>
                                    <div class="stat-bar-inner" style="width: ${value/255 * 100}%;"></div>
                                </div>
                            </div>
                        `
                    }).join('')}
                </div>
            </div>
        `;
    }

    /**
     * Array of pokémon cards fronts
     * @type {HTMLDivElement[]}
     */
    let pokemon_cards_fronts = document.querySelectorAll('.pokemon-front');

    /**
     * Array of pokémon cards backs
     * @type {HTMLDivElement[]}
     */
    let pokemon_cards_backs = document.querySelectorAll('.pokemon-back');

    pokemon_cards_fronts.forEach((card, index) => {
        card.addEventListener('click', () => {
            card.classList.add('unturned');
            card.classList.remove('turned');
            pokemon_cards_backs[index].classList.add('turned');
            pokemon_cards_backs[index].classList.remove('unturned');
        })
    });

    pokemon_cards_backs.forEach((card, index) => {
        card.addEventListener('click', () => {
            card.classList.add('unturned');
            card.classList.remove('turned');
            pokemon_cards_fronts[index].classList.add('turned');
            pokemon_cards_fronts[index].classList.remove('unturned');
        })
    })
}

/**
 * Initializes all the necessary values and call the first render of the pokédex
 */
const initializeValuesAndFirstRender = () => {
    current_page = 1;
    total_pages = Math.ceil(pokemons.length / 12);
    console.log(`Total pages: ${total_pages}`);
    renderPokedex();
}

/**
 * Set the forward and backward arrows and their listeners
 */
const setElements = () => {
    leftArrow.addEventListener('click', () => {
        if(current_page == 1) current_page = total_pages;
        else current_page--;
        renderPokedex();
    });

    rightArrow.addEventListener('click', () => {
        if(current_page == total_pages) current_page = 1;
        else current_page++;
        pokedex.scrollLeft += 1000;
        renderPokedex();
    });
}

/**
 * Initializes all the necessary 
 */
window.onload = () => {
    getPokemons();
    setElements();
}




